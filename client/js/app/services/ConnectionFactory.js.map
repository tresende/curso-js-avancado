{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Reflect","apply","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AACXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AAEV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;sDAEwB;;AAErB,4BAAIH,UAAJ,EAAgB;AACZI,oCAAQC,KAAR,CAAcJ,KAAd,EAAqBD,UAArB,EAAiC,EAAjC;AACAA,yCAAa,IAAb;AACH;AACJ;;;oDAEsB;;AAEnB,+BAAO,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBb,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAW,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BX,kDAAkBY,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAI,CAAClB,UAAL,EAAiB;AACbA,iDAAae,EAAEC,MAAF,CAASC,MAAtB;AACA;AACAhB,4CAAQD,WAAWC,KAAX,CAAiBkB,IAAjB,CAAsBnB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAY;AAC3B,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;AACDI,wCAAQP,UAAR;AACH,6BAXD;AAYAS,wCAAYW,OAAZ,GAAsB,aAAK;;AAEvBZ,uCAAOO,EAAEC,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBAzBM,CAAP;AA0BH;;;kDAEoBtB,U,EAAY;;AAE7BH,+BAAO0B,OAAP,CAAe,iBAAS;;AAEpB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7C1B,2CAAW2B,iBAAX,CAA6BD,KAA7B;AACH;AACD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBAND;AAOH","file":"ConnectionFactory.js","sourcesContent":["\nconst stores = ['negociacoes'];\nconst version = 4;\nconst dbName = 'aluraframe';\nvar connection = null;\nvar close = null;\n\nexport class ConnectionFactory {\n\n    constructor() {\n\n        throw new Error('Não é possível criar instâncias de ConnectionFactory');\n    }\n\n    static closeConnection() {\n\n        if (connection) {\n            Reflect.apply(close, connection, [])\n            connection = null;\n        }\n    }\n\n    static getConnection() {\n\n        return new Promise((resolve, reject) => {\n\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n\n                ConnectionFactory._createStores(e.target.result);\n            };\n\n            openRequest.onsuccess = e => {\n\n                if (!connection) {\n                    connection = e.target.result;\n                    // close = connection.close.bind(connection);\n                    close = connection.close.bind(connection);\n                    connection.close = function () {\n                        throw new Error('Você não pode fechar diretamente a conexão');\n                    };\n                }\n                resolve(connection);\n            }\n            openRequest.onerror = e => {\n\n                reject(e.target.error.name);\n            };\n        });\n    }\n\n    static _createStores(connection) {\n\n        stores.forEach(store => {\n\n            if (connection.objectStoreNames.contains(store)) {\n                connection.deleteObjectStore(store);\n            }\n            connection.createObjectStore(store, { autoIncrement: true });\n        });\n    }\n}"]}